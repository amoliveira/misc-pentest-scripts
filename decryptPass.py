#!/usr/bin/env python3

from hashlib import sha1,md5
import base64
import argparse

parser = argparse.ArgumentParser(description = '(MD5 -> b64 -> sha1) decoder by Leonardo Militz')
parser.add_argument('-s', action = 'store', dest = 'hash', 
					required = True, help = 'Hash to decode')
parser.add_argument('-w', action = 'store', dest = 'wordlist', 
					required = False, help = 'Wordlist used to decode.', default = "/usr/share/john/password.lst")

arguments = parser.parse_args()
wordlist_name = str(arguments.wordlist)
crackWord = arguments.hash

found = False
result = ''
kind = '(default)'

if (wordlist_name != "/usr/share/john/password.lst"): kind = '(custom)' 

print("===============================================================")
print(f"Hash: {crackWord}\nWordlist: {wordlist_name} {kind}")
print("===============================================================")

with open(wordlist_name) as wordlist:
	for line in wordlist:
		word = line.strip().encode('utf-8')
		md5word  = md5(word).hexdigest()
		b64word  = base64.b64encode(md5word.encode('utf-8'))
		sha1word = sha1(b64word).hexdigest()  
		
		if sha1word == crackWord:
			found = True
			result = f"\nFOUND ===> {crackWord} ===> {word.decode('utf-8')}\n\n"
			result = result + f"Process:\n\n[1] MD5({word.decode('utf-8')}) ===> {md5word}\n"
			result = result + f"[2] base64({md5word}) ===> {b64word.decode('utf-8')}\n"
			result = result + f"[3] SHA1({b64word.decode('utf-8')}) ===> {sha1word}\n"
			break

if found: 
	print(result)
else:
	print("\nCouldn't crack this hash with the provided wordlist.\n")

print("===============================================================")

